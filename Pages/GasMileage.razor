@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Text.Json

<div class="input-group mb-3">
    <span class="input-group-text">給油日</span>
    <input id="odo" type="date" @bind="_newItem.InDate" class="form-control" />
</div>
<div class="input-group mb-3">
    <span class="input-group-text">オドメーター</span>
    <!--<label for="odo" class="form-label">オドメーター：</label>-->
    <input id="odo" type="number" @bind="_newItem.Odometer" class="form-control" style="text-align:right"/>
    <span class="input-group-text">km</span>
</div>
<div class="input-group mb-3">
    <span class="input-group-text">給油量</span>
    <!--<label for="oil" class="form-label">給油量：</label>-->
    <input id="oil" type="number" step="0.01" @bind="_newItem.OilingQuantity" class="form-control" style="text-align:right"/>
    <span class="input-group-text">L&nbsp;</span>
</div>

<button @onclick="AddGasMileage" class="btn btn-primary">計算</button>
<button @onclick="AllClear" class="btn btn-danger">初期化</button>
<!--
オドメータ：
<input type="number" step="0.1" @bind="_newItem.Odometer" style="text-align:right" />
給油量：
<input type="number" step="0.01" @bind="_newItem.OilingQuantity" style="text-align:right"  />
-->

@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>給油日</th>
            <th>オドメーター<br/>走行距離</th>
            <th>給油量</th>
            <th>燃費</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var item in _items.Reverse<GasMileageItem>())
            {
                <tr>
                    <td>@item.GetInDate()</td>
                    <td style="text-align:right;">@item.GetOdometerString()<br/>@item.GetMileageString()</td>
                    <td style="text-align:right;">@item.GetOilingQuantityString()</td>
                    <td style="text-align:right;">@item.GetGasMileageString()</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<GasMileageItem> _items = new();
    private GasMileageItem _newItem = new();

    protected override async Task OnInitializedAsync()
    {
        var count = await localStorage.GetItemAsync<int>("count");
        for (var i = 0; i < count; i++)
        {
            var key = (i + 1).ToString();
            var serializedString = await localStorage.GetItemAsync<string>(key);
            var item = System.Text.Json.JsonSerializer.Deserialize<GasMileageItem>(serializedString);
            _items.Add(item);
        }
    }

    private void AddGasMileage()
    {
        var newOdometer = _newItem.Odometer.GetValueOrDefault();
        var newOilingQuantity = _newItem.OilingQuantity.GetValueOrDefault();
        if (newOdometer > 0)
        {
            // 丸め処理
            _newItem.Odometer = Math.Round(newOdometer, 1);
            _newItem.OilingQuantity = Math.Round(newOilingQuantity, 2);
            if (_items.Count > 0)
            {
                
                var previousOdo = _items[^1].Odometer.Value;
                _newItem.Mileage = _newItem.Odometer.Value - previousOdo;

                var mil = Convert.ToDecimal(_newItem.Mileage);
                var oil = Convert.ToDecimal(_newItem.OilingQuantity);
                var gas = decimal.Round(decimal.Divide(mil, oil), 2);
                _newItem.GasMileage = decimal.ToDouble((gas));
            }
            _items.Add(_newItem);

            var serializedString = System.Text.Json.JsonSerializer.Serialize(_newItem);
            // Console.WriteLine(serializedString);

            localStorage.SetItemAsync("count", _items.Count);
            localStorage.SetItemAsync(_items.Count.ToString(), serializedString);
            
            _newItem = new GasMileageItem();
        }
    }

    private void AllClear()
    {
        localStorage.ClearAsync();
        _items.Clear();
    }
}
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.Text.Json

<CascadingValue Value="@_newItem">
    <InputDialog @ref="confirmation" ActionSelected="ActionSelected" />
</CascadingValue>

<div class="d-flex justify-content-between">
        <button @onclick="AllClear" class="btn btn-danger btn-sm">初期化</button>
        <button type="button" class="btn btn-primary" @onclick="InputDialogShow">追加</button>
</div>



@if (_items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
        <tr style="font-size: 12px;">
            <th>給油日</th>
            <th>オドメーター<br/>走行距離</th>
            <th>給油量</th>
            <th>燃費</th>
        </tr>
        </thead>
        <tbody style="font-size: 14px;">
            @foreach (var item in _items.Reverse<GasMileageItem>())
            {
                <tr>
                    <td>@item.GetInDate()</td>
                    <td style="text-align:right;">@item.GetOdometerString()<br/>@item.GetMileageString()</td>
                    <td style="text-align:right;">@item.GetOilingQuantityString()</td>
                    <td style="text-align:right;">@item.GetGasMileageString()</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    
    private InputDialog confirmation;
    
    private List<GasMileageItem> _items = new();
    private GasMileageItem _newItem = new();
    
    private void InputDialogShow()
    {
        // 最初に初期化するか？
        _newItem = new GasMileageItem();
        confirmation.ShowDialog();
    }

    private void ActionSelected(bool dialogResult)
    {
        if (dialogResult)
        {
            // 登録処理
            AddGasMileage();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var count = await localStorage.GetItemAsync<int>("count");
        for (var i = 0; i < count; i++)
        {
            var key = (i + 1).ToString();
            var serializedString = await localStorage.GetItemAsync<string>(key);
            var item = System.Text.Json.JsonSerializer.Deserialize<GasMileageItem>(serializedString);
            _items.Add(item);
        }
    }

    private void AddGasMileage()
    {
        var newOdometer = _newItem.Odometer.GetValueOrDefault();
        var newOilingQuantity = _newItem.OilingQuantity.GetValueOrDefault();
        if (newOdometer > 0)
        {
            // 丸め処理
            _newItem.Odometer = Math.Round(newOdometer, 1);
            _newItem.OilingQuantity = Math.Round(newOilingQuantity, 2);
            if (_items.Count > 0)
            {
                
                var previousOdo = _items[^1].Odometer.Value;
                _newItem.Mileage = _newItem.Odometer.Value - previousOdo;

                var mil = Convert.ToDecimal(_newItem.Mileage);
                var oil = Convert.ToDecimal(_newItem.OilingQuantity);
                var gas = decimal.Round(decimal.Divide(mil, oil), 2);
                _newItem.GasMileage = decimal.ToDouble((gas));
            }
            _items.Add(_newItem);

            var serializedString = System.Text.Json.JsonSerializer.Serialize(_newItem);
            // Console.WriteLine(serializedString);

            localStorage.SetItemAsync("count", _items.Count);
            localStorage.SetItemAsync(_items.Count.ToString(), serializedString);
            
            _newItem = new GasMileageItem();
        }
    }

    private void AllClear()
    {
        localStorage.ClearAsync();
        _items.Clear();
    }
}